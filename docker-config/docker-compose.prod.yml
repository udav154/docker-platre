version: '3'

services:
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker-config/Dockerfile.prod.frontend
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_API_TOKEN: ${NEXT_PUBLIC_API_TOKEN}
        NEXT_PUBLIC_CLIENT_API_URL: ${NEXT_PUBLIC_CLIENT_API_URL}
        NEXT_PUBLIC_SERVER_API_URL: ${NEXT_PUBLIC_SERVER_API_URL}
    ports:
      - "3000:8080"
    env_file: .env
    networks:
      - app-network
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_API_TOKEN: ${NEXT_PUBLIC_API_TOKEN}
      NEXT_PUBLIC_CLIENT_API_URL: ${NEXT_PUBLIC_CLIENT_API_URL}
      NEXT_PUBLIC_SERVER_API_URL: ${NEXT_PUBLIC_SERVER_API_URL}

  cms:
    # image: cms-prod
    build:
      context: ../cms
      dockerfile: ../docker-config/Dockerfile.prod.cms
    ports:
      - "1337:1337"
    env_file: .env
    environment:
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_HOST: db
      DATABASE_CLIENT: postgres
      DATABASE_PORT: 5432
      DATABASE_SSL: "false"
      NODE_ENV: production
    networks:
      - app-network
    depends_on:
      - db

  db:
    image: postgres:14.1-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data: