
# # Creating multi-stage build for production
# FROM node:18-alpine as build
# RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev vips-dev git > /dev/null 2>&1
# ENV NODE_ENV=production

# WORKDIR /opt/
# COPY package.json yarn.lock ./
# RUN yarn global add node-gyp
# RUN yarn config set network-timeout 600000 -g && yarn install --production
# ENV PATH /opt/node_modules/.bin:$PATH
# WORKDIR /opt/app
# COPY . .
# RUN yarn build

# # Creating final production image
# FROM node:18-alpine
# RUN apk add --no-cache vips-dev
# ENV NODE_ENV=production
# WORKDIR /opt/
# COPY --from=build /opt/node_modules ./node_modules
# WORKDIR /opt/app
# COPY --from=build /opt/app ./
# ENV PATH /opt/node_modules/.bin:$PATH

# RUN chown -R node:node /opt/app
# USER node
# EXPOSE 1337
# CMD ["yarn", "start"]



# 1️⃣ Первый этап: сборка
FROM node:18-alpine AS builder
RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev vips-dev git > /dev/null 2>&1
ENV NODE_ENV=production

# Указываем корректную рабочую директорию
WORKDIR /opt/app

# Копируем package.json и устанавливаем зависимости
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile --production

# Копируем исходники и собираем Strapi
COPY . .
RUN yarn build

# 2️⃣ Второй этап: финальный контейнер
FROM node:18-alpine
RUN apk add --no-cache vips-dev
ENV NODE_ENV=production

WORKDIR /opt/app

# Копируем файлы из builder
COPY --from=builder /opt/app ./
COPY --from=builder /opt/app/node_modules ./node_modules

# Отключаем Telemetry Strapi
ENV STRAPI_TELEMETRY_DISABLED true

EXPOSE 1337
CMD ["yarn", "start"]
